                             SysDB Release Notes
                            =====================

  The release notes contain noteworthy changes in each System DataBase (SysDB)
  release, with a summary of the most important changes at the top. A complete
  and very detailed list of changes can be obtained from the Git logs for each
  release.

 About SysDB:
 ~~~~~~~~~~~~
  “System DataBase” (SysDB) is a multi-backend system management and inventory
  collection service. It stores system and inventory information about
  hardware and software systems. This information is (continuously) collected
  from various configurable backends (inventory services, monitoring services,
  etc.) and stored in a graph-like hierarchy of generic objects. The store may
  be queried through a generic interface independent of the active backends.
  Object names are canonicalized before they are added to the store to ensure
  a consistent view of your infrastructure.

  <https://sysdb.io/>

Version 0.4.0, Release Date: 2014-09-01
---------------------------------------

  This release features support for metrics and transparent access to a
  backend's time-series data. Some backward-incompatible changes were applied
  to some query commands for more consistency.

   * build system:
     - Added checks for format strings and arguments.
     - Changed configure option for collectd::unixsock to
       --enable-collectd-unixsock.
   * core:
     - Added support for “metric” objects which may be assigned to a host.
     - Introduced support for handling time-series data: added new data
       structures describing time-series data and a new type of plugins called
       “time-series fetchers” which are used to access time-series
       information.
   * store:
     - Fixed a memory leak.
     - Apply (very) simple optimizations to lookup expressions.
     - Added support for metrics and their “data-stores” (describing how to
       access the actual data references by a metric).
     - Added support for querying time-series data through the newly
       introduced “time-series fetcher” plugins.
   * frontend:
     - Fixed a bug that might have caused reading too much data from the
       connection buffer in certain situations.
   * query language:
     - The ‘MATCHING’ clause is now optional in ‘LOOKUP’ queries.
     - The ‘LIST’ and ‘FETCH’ commands support ‘FILTER’ clauses as well.
     - ‘LIST’ / ‘FETCH’ were changed to ‘LIST hosts’ / ‘FETCH host’.
     - Added the ‘TIMESERIES’ command to query arbitrary time-series which
       fetches time-series data from a backend's data-store for a given period
       of time.
     - Added support for date/time values.
     - Added support for single quotes in string values: two adjacent single
       quotes may be used to specify a single quote.
   * documentation:
     - Documented the frontend protocol in frontend/proto.h.
     - Documented changes to the query language and new / updated plugins.
     - Documented all supported data types.

  Backends:
   * collectd::unixsock:
     - The plugin now uses metrics in place of services.
     - New config options ‘TimeseriesBackend’ and ‘TimeseriesBaseURL’ to
       specify access to time-series, currently limited to ‘rrdtool’ and
       ‘rrdcached’ access.

  Plugins:
   * timeseries::rrdtool:
     - New plugin adding support to fetch time-series from local RRD files.
     - Supports flushing of values in RRDCacheD.

Version 0.3.0, Release Date: 2014-08-01
---------------------------------------

  This release includes major enhancements and new features in the SysDB store
  which is the core of the database. Most notably, complex expressions are now
  supported when looking up information and filters may be used to preselect
  the information to be returned. Some backward-incompatible changes were
  introduced in the query language to avoid potentially confusing semantics.

   * sysdb: Fixed non-interactive mode when using libedit.
   * core:
     - Fixed weird behavior when collector callbacks were registered without
       any plugin context information (as it would, e.g., happen when using
       LoadPlugin instead of LoadBackend in sysdbd).
   * store:
     - Introduced service attributes -- similar to host attributes but
       assigned to a service object.
     - Don't log “value too old” messages if an updated object uses the same
       timestamp as the old object.
     - Switched from linked-lists to AVL trees for storing all object types to
       reduce lookup times from O(n) to O(log n).
     - Added infrastructure for handling and evaluating arithmetic
       expressions and filters (see also the changes to the query language
       below).
     - Export various fields describing base attributes of all stored object
       types: last_update, age, interval, and backend. These fields may be
       used when querying the store.
   * frontend: Include new service attributes in JSON output.
   * query language:
     - Added support for ‘IS NULL’ attribute checks matching on non-existent
       attributes.
     - Changed ‘LOOKUP ... WHERE’ queries to ‘LOOKUP ... MATCHING’ to avoid
       confusion with SQL semantics.
     - Switched from ‘<obj>.name’ to ‘<obj>’ in MATCHING clauses, thus, no
       longer shadowing attributes called “name”.
     - Added support for arithmetic expressions in places that used simple
       data values before. Arithmetic expressions support addition,
       subtraction, multiplication, division, modulo, and concatenation
       operations. The expressions may be based on constant values or
       queryable fields of the stored objects (specified as ‘:last_update’,
       ‘:age’, ‘:interval’, and ‘:backend’).
     - Added ‘FILTER’ support to ‘LOOKUP’ queries. Filters are conditional
       expressions which may optionally be used to limit the query and the
       result to object (of any type) matching the filter condition.
     - Added support to specify date and time values.
   * utils:
     - avltree: Added an AVL tree (self-balancing binary tree) implementation.
   * documentation: Added documentation for the new query language features.
   * testing: Run all unit tests through valgrind by default (if available).

  Backends:
   * collectd::unixsock:
     - Added support for spaces in identifiers.
     - Store plugin identifier (host, plugin, plugin_instance, type,
       type_instance) as service attributes.

Version 0.2.0, Release Date: 2014-07-01
---------------------------------------

  This is another development snapshot of SysDB. The main focus of this
  release is on stabilizing existing features and extending the query
  infrastructure to support all attribute types and further operators.

   * build system: Fixed linking of sysdbd to include *all* necessary object
     files. This bug caused some plugins to be un-loadable.
   * sysdbd: Fixed shutdown process in case of errors.
   * sysdb: Fixed a bug causing some server replies to be ignored when exiting
     from the client.
   * core:
     - Always log to the standard output stream if no user-provided logging
       callbacks had been specified. Previously this was disabled after
       enabling logging to clients in the frontend.
     - Simplified plugin naming information and determine configuration
       callback names automatically to ensure better consistency.
   * store:
     - Simplified internal data management.
     - Store the list of backends along with each stored object which provide
       the respective object.
   * frontend:
     - Simplified and improved the internal architecture matching / looking up
       objects.
     - Fixed parser to correctly reject invalid object types.
     - Automatically create the base directory of a listening UNIX socket.
   * query language: Added support for numeric constants and added operators
     for less and greater than or equal attribute comparison.
   * documentation: Added missing files to the distribution tarball.

  Plugins:
   * syslog: Don't log debug messages to syslog.

Version 0.1.0, Release Date: 2014-06-01
---------------------------------------

  This is the initial release of SysDB. It provides the following core
  features:

   * sysdb: A terminal-based, interactive client program. Supports
     line-editing and history based on libreadline or libedit and uses an
     asynchronous, event-driven architecture to handle user input and server
     replies simultaneously.
   * sysdbd: The database backend service configurable through a configuration
     file. The daemon supports online reconfiguration.
   * core: Flexible, multi-threaded core architecture providing a configurable
     plugin infrastructure for querying external data-sources and extending
     core functionality. The following plugin types are supported:
     - data collection
     - hostname canonicalization
     - logging
   * store: Central, in-memory object store managing host and service objects
     and their attributes. Host names may be canonicalized through respective
     plugins. Each object is automatically attributed with last update and
     interval information using nano-seconds resolution. Attributes may have
     various types (integer, decimal, string, date-time, binary).
   * frontend: The frontend handling client connections uses a multi-threaded,
     asynchronous, event-driven architecture capable of handling multiple
     listen addresses.
   * query language: The store may be queried using the ‘LIST’, ‘LOOKUP’, and
     ‘FETCH’ commands returning JSON formatted objects.
   * utils: A rich set of abstract data-types and utility functions for
     internal use:
     - generic channels for asynchronous, multi-threaded I/O
     - DBI wrapper to ease common database access operations
     - thread-aware error handling and reporting
     - doubly linked-lists
     - dynamic sized memory buffers supporting formatted strings and binary
       data
     - UNIX socket client implementation
   * documentation: Full documentation for the tools, all plugins, and the
     query language provided as manpages and HTML pages.
   * testing: Unit and integration tests exist for most parts except plugins
     covering 77% of all functions. Valgrind and Clang's address sanitzer are
     used to detect memory leaks and programming errors.

  The following plugins are shipped with this version of SysDB:

  Backends:
   * collectd::unixsock: Query collectd through its ‘unixsock’ interface
   * mk-livestatus: Query arbitrary (monitoring) systems using the Check_MK
     Livestatus interface.
   * puppet::store-configs: Query Puppet through its “stored configuration”
     database.

  Plugins:
   * cname::dns: Canonicalize hostnames by querying DNS information.
   * syslog: Send log messages to the system log service.

